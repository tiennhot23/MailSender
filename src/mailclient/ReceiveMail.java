/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mailclient;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.BodyPart;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.FolderNotFoundException;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.Part;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeBodyPart;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author tienn
 */
public class ReceiveMail extends javax.swing.JFrame {

    /**
     * Creates new form ReceiveMail
     */
    public ReceiveMail() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_mail = new javax.swing.JTextField();
        txt_pass = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_res = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        noti = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Email:");

        jLabel2.setText("Password:");

        txt_res.setColumns(20);
        txt_res.setRows(5);
        jScrollPane1.setViewportView(txt_res);

        jButton1.setText("Đăng nhập");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Nội dung:");

        noti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noti.setText("Vui lòng chờ trong ít phút nếu tải nhiều file.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_mail)
                            .addComponent(txt_pass)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(noti, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_mail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noti)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txt_res.setText("");
        loadMailImap();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceiveMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceiveMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceiveMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceiveMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReceiveMail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noti;
    private javax.swing.JTextField txt_mail;
    private javax.swing.JTextField txt_pass;
    private javax.swing.JTextArea txt_res;
    // End of variables declaration//GEN-END:variables

    private void loadMailImap() {
        /*
        Imap  là giao thức 2 chiều
        Port 143 – port không mã hóa
        port 993 - SSL/TLS (imaps)
        Server vẫn giữ mail gốc, client gữ bản đệm
        Mọi thay đổi đều được đồng bộ lên server
        Mặc định sau khi setflag là Delete thì mail sẽ được xoá khỏi thư mục inbox 
        và đưa vào mục lưu trữ chứ không xoá vĩnh viễn
        Có thể thiết lập lại trong mục Manage labels/Forwarding and POP/IMAP
        Download file khá lâu
        */
        
        
        final String mail = txt_mail.getText().trim();
        final String password = txt_pass.getText().trim();
        final String host = "imap.gmail.com";
        final String port = "993";

        Properties properties = System.getProperties();
        properties.put("mail.imap.host", host);
        properties.put("mail.imap.port", port);
        properties.put("mail.imap.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
        properties.put("mail.imap.socketFactory.fallback", "false");
        properties.put("mail.imap.socketFactory.port", port);

        Session session = Session.getDefaultInstance(properties);

        try {
            Store store = session.getStore("imap");
            store.connect(mail, password);

            Folder folderInbox = store.getFolder("INBOX");
            folderInbox.open(Folder.READ_WRITE);

            int len = folderInbox.getMessages().length;
            if(len == 0){
                JOptionPane.showMessageDialog(this, "Hộp thư trống....");
                return;
            }
            
            // Mail mới nhất
            Message message = folderInbox.getMessages()[len - 1];
            Multipart multipart = (Multipart) message.getContent();

            for (int i = 0; i < multipart.getCount(); i++) {

//                BodyPart bodyPart = multipart.getBodyPart(i);
                MimeBodyPart bodyPart = (MimeBodyPart) multipart.getBodyPart(i);

                System.out.println(bodyPart.getContentType());
                InputStream input = bodyPart.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(input));
                if (Part.ATTACHMENT.equalsIgnoreCase(bodyPart.getDisposition())) {
                    File file = new File(bodyPart.getFileName());
                    //check file at C:\Users\tienn\Documents\NetBeansProjects\MailClient\
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    System.out.println(file.getAbsolutePath());
                    bodyPart.saveFile(file);
                    txt_res.append("File " + file.getName() + " đã được tải vào đường dẫn: \n");
                    txt_res.append(file.getAbsolutePath() + "\n");

//                    FileOutputStream output = new FileOutputStream(file.getAbsolutePath());
//
//                    byte[] buffer = new byte[4096];
//
//                    int byteRead;
//
//                    while ((byteRead = input.read(buffer)) != -1) {
//                        output.write(buffer, 0, byteRead);
//                    }
//                    output.close();
                    
                } else {
                    System.out.println(bodyPart.getContent().toString());
                    txt_res.append("Nội dung mail: " + bodyPart.getContent().toString() + "\n");
                }
                br.close();
            }

            message.setFlag(Flags.Flag.SEEN, true);
            message.setFlag(Flags.Flag.DELETED, true);

            folderInbox.close(true);
            store.close();
        }catch (MessagingException ex) {
            JOptionPane.showMessageDialog(this, "Could not connect to the message store.");
            ex.printStackTrace();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Kiểm tra lại mail và password.");
            ex.printStackTrace();
        } 
    }
    
    private void loadMailPop3(){
        /*
        Pop3  là giao thức 1 chiều
        port 110 - port ko mã hoá
        port 995 - SSL/TLS (pop3s)
        Mặc định sau khi tải mail xuống client, server sẽ vẫn giữ bản sao còn mail đc lưu về bộ nhớ cục bộ
        Có thể thiết lập lại trong mục Manage labels/Forwarding and POP/IMAP
        Không thể set flag delete/seen 
        Download file nhanh hơn imap
        */
        
        
        final String mail = txt_mail.getText().trim();
        final String password = txt_pass.getText().trim();
        final String host = "pop.gmail.com";

        Properties properties = System.getProperties();
        properties.put("mail.smtp.host", host);

        Session session = Session.getDefaultInstance(properties);

        try {
            Store store = session.getStore("pop3s");
            store.connect(host, mail, password);

            Folder folderInbox = store.getFolder("INBOX");
            folderInbox.open(Folder.READ_WRITE);

            int len = folderInbox.getMessages().length;
            if(len == 0){
                JOptionPane.showMessageDialog(this, "Hộp thư trống....");
                return;
            }
            
            // Mail mới nhất
            Message message = folderInbox.getMessages()[len - 1];
            Multipart multipart = (Multipart) message.getContent();

            for (int i = 0; i < multipart.getCount(); i++) {

//                BodyPart bodyPart = multipart.getBodyPart(i);
                MimeBodyPart bodyPart = (MimeBodyPart) multipart.getBodyPart(i);

                System.out.println(bodyPart.getContentType());
                InputStream input = bodyPart.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(input));
                if (Part.ATTACHMENT.equalsIgnoreCase(bodyPart.getDisposition())) {
                    File file = new File(bodyPart.getFileName());
                    //check file at C:\Users\tienn\Documents\NetBeansProjects\MailClient\
                    if (!file.exists()) {
                        file.createNewFile();
                    }
                    System.out.println(file.getAbsolutePath());
                    bodyPart.saveFile(file);
                    txt_res.append("File " + file.getName() + " đã được tải vào đường dẫn: \n");
                    txt_res.append(file.getAbsolutePath() + "\n");
                } else {
                    System.out.println(bodyPart.getContent().toString());
                    txt_res.append("Nội dung mail: " + bodyPart.getContent().toString() + "\n");
                }
                br.close();
            }

            folderInbox.close(true);
            store.close();
        }catch (MessagingException ex) {
            JOptionPane.showMessageDialog(this, "Could not connect to the message store.");
            ex.printStackTrace();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Kiểm tra lại mail và password.");
            ex.printStackTrace();
        } 
    }
}
